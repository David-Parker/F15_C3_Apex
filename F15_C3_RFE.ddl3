DROP SEQUENCE F15_C3_Auth_seq ; 
create sequence F15_C3_Auth_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_C3_Auth_PK_trig 
before insert on F15_C3_Auth
for each row 
begin 
select F15_C3_Auth_seq.nextval into :new.auth_id from dual; 
end; 
/
alter table F15_C3_Auth add created date ; 
alter table F15_C3_Auth add created_by VARCHAR2 (255) ; 
alter table F15_C3_Auth add row_version_number integer ; 
alter table F15_C3_Auth add updated date ; 
alter table F15_C3_Auth add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_C3_Auth_AUD_trig 
before insert or update on F15_C3_Auth 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_C3_Comment_seq ; 
create sequence F15_C3_Comment_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_C3_Comment_PK_trig 
before insert on F15_C3_Comment
for each row 
begin 
select F15_C3_Comment_seq.nextval into :new.comment_id from dual; 
end; 
/
alter table F15_C3_Comment add created date ; 
alter table F15_C3_Comment add created_by VARCHAR2 (255) ; 
alter table F15_C3_Comment add row_version_number integer ; 
alter table F15_C3_Comment add updated date ; 
alter table F15_C3_Comment add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_C3_Comment_AUD_trig 
before insert or update on F15_C3_Comment 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_C3_Document_seq ; 
create sequence F15_C3_Document_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_C3_Document_PK_trig 
before insert on F15_C3_Document
for each row 
begin 
select F15_C3_Document_seq.nextval into :new.doc_id from dual; 
end; 
/
alter table F15_C3_Document add created date ; 
alter table F15_C3_Document add created_by VARCHAR2 (255) ; 
alter table F15_C3_Document add row_version_number integer ; 
alter table F15_C3_Document add updated date ; 
alter table F15_C3_Document add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_C3_Document_AUD_trig 
before insert or update on F15_C3_Document 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_C3_Lab_seq ; 
create sequence F15_C3_Lab_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_C3_Lab_PK_trig 
before insert on F15_C3_Lab
for each row 
begin 
select F15_C3_Lab_seq.nextval into :new.lab_id from dual; 
end; 
/
alter table F15_C3_Lab add created date ; 
alter table F15_C3_Lab add created_by VARCHAR2 (255) ; 
alter table F15_C3_Lab add row_version_number integer ; 
alter table F15_C3_Lab add updated date ; 
alter table F15_C3_Lab add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_C3_Lab_AUD_trig 
before insert or update on F15_C3_Lab 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_C3_RFE_seq ; 
create sequence F15_C3_RFE_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_C3_RFE_PK_trig 
before insert on F15_C3_RFE
for each row 
begin 
select F15_C3_RFE_seq.nextval into :new.ref_id from dual; 
end; 
/
alter table F15_C3_RFE add created date ; 
alter table F15_C3_RFE add created_by VARCHAR2 (255) ; 
alter table F15_C3_RFE add row_version_number integer ; 
alter table F15_C3_RFE add updated date ; 
alter table F15_C3_RFE add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_C3_RFE_AUD_trig 
before insert or update on F15_C3_RFE 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_C3_Status_Code_seq ; 
create sequence F15_C3_Status_Code_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_C3_Status_Code_PK_trig 
before insert on F15_C3_Status_Code
for each row 
begin 
select F15_C3_Status_Code_seq.nextval into :new.status_id from dual; 
end; 
/
alter table F15_C3_Status_Code add created date ; 
alter table F15_C3_Status_Code add created_by VARCHAR2 (255) ; 
alter table F15_C3_Status_Code add row_version_number integer ; 
alter table F15_C3_Status_Code add updated date ; 
alter table F15_C3_Status_Code add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_C3_Status_Code_AUD_trig 
before insert or update on F15_C3_Status_Code 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_C3_Sts_His_seq ; 
create sequence F15_C3_Sts_His_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_C3_Sts_His_PK_trig 
before insert on F15_C3_Sts_His
for each row 
begin 
select F15_C3_Sts_His_seq.nextval into :new.his_id from dual; 
end; 
/
alter table F15_C3_Sts_His add created date ; 
alter table F15_C3_Sts_His add created_by VARCHAR2 (255) ; 
alter table F15_C3_Sts_His add row_version_number integer ; 
alter table F15_C3_Sts_His add updated date ; 
alter table F15_C3_Sts_His add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_C3_Sts_His_AUD_trig 
before insert or update on F15_C3_Sts_His 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_C3_Task_seq ; 
create sequence F15_C3_Task_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_C3_Task_PK_trig 
before insert on F15_C3_Task
for each row 
begin 
select F15_C3_Task_seq.nextval into :new.task_id from dual; 
end; 
/
alter table F15_C3_Task add created date ; 
alter table F15_C3_Task add created_by VARCHAR2 (255) ; 
alter table F15_C3_Task add row_version_number integer ; 
alter table F15_C3_Task add updated date ; 
alter table F15_C3_Task add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_C3_Task_AUD_trig 
before insert or update on F15_C3_Task 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_C3_employee_seq ; 
create sequence F15_C3_employee_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_C3_employee_PK_trig 
before insert on F15_C3_employee
for each row 
begin 
select F15_C3_employee_seq.nextval into :new.emp_id from dual; 
end; 
/
alter table F15_C3_employee add created date ; 
alter table F15_C3_employee add created_by VARCHAR2 (255) ; 
alter table F15_C3_employee add row_version_number integer ; 
alter table F15_C3_employee add updated date ; 
alter table F15_C3_employee add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_C3_employee_AUD_trig 
before insert or update on F15_C3_employee 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

-- Table Relation_11 has a compound primary key so no sequence or trigger was created for it.
-- Table approvers has a compound primary key so no sequence or trigger was created for it.
-- Table contacts has a compound primary key so no sequence or trigger was created for it.
DROP INDEX F15_C3_employee_emp_id_FK_1 ;
CREATE INDEX F15_C3_employee_emp_id_FK_1 ON F15_C3_Comment(F15_C3_employee_emp_id) ;
DROP INDEX F15_C3_RFE_ref_id_FK_2 ;
CREATE INDEX F15_C3_RFE_ref_id_FK_2 ON F15_C3_Document(F15_C3_RFE_ref_id) ;
DROP INDEX F15_C3_Status_Code_sta_FK_3 ;
CREATE INDEX F15_C3_Status_Code_sta_FK_3 ON F15_C3_RFE(F15_C3_Status_Code_status_id) ;
DROP INDEX F15_C3_Task_task_id_FK_4 ;
CREATE INDEX F15_C3_Task_task_id_FK_4 ON F15_C3_RFE(F15_C3_Task_task_id) ;
DROP INDEX F15_C3_employee_emp_id_FK_5 ;
CREATE INDEX F15_C3_employee_emp_id_FK_5 ON F15_C3_RFE(F15_C3_employee_emp_id) ;
DROP INDEX F15_C3_RFE_ref_id_FK_6 ;
CREATE INDEX F15_C3_RFE_ref_id_FK_6 ON F15_C3_Sts_His(F15_C3_RFE_ref_id) ;
DROP INDEX F15_C3_Lab_lab_id_FK_8 ;
CREATE INDEX F15_C3_Lab_lab_id_FK_8 ON F15_C3_employee(F15_C3_Lab_lab_id) ;
DROP INDEX F15_C3_RFE_ref_id_FK_9 ;
CREATE INDEX F15_C3_RFE_ref_id_FK_9 ON Relation_11(F15_C3_RFE_ref_id) ;
DROP INDEX F15_C3_Comment_comment_FK_10 ;
CREATE INDEX F15_C3_Comment_comment_FK_10 ON Relation_11(F15_C3_Comment_comment_id) ;
DROP INDEX F15_C3_employee_emp_id_FK_11 ;
CREATE INDEX F15_C3_employee_emp_id_FK_11 ON approvers(F15_C3_employee_emp_id) ;
DROP INDEX F15_C3_RFE_ref_id_FK_12 ;
CREATE INDEX F15_C3_RFE_ref_id_FK_12 ON approvers(F15_C3_RFE_ref_id) ;
DROP INDEX F15_C3_employee_emp_id_FK_13 ;
CREATE INDEX F15_C3_employee_emp_id_FK_13 ON contacts(F15_C3_employee_emp_id) ;
DROP INDEX F15_C3_RFE_ref_id_FK_14 ;
CREATE INDEX F15_C3_RFE_ref_id_FK_14 ON contacts(F15_C3_RFE_ref_id) ;
